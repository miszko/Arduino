// dht
// Cyfrowe piny 2 oraz 3 (2=zewnetrzny 3=wewnetrzny)
#include "DHT.h"          // biblioteka DHT
#define DHTPINZ 2          // numer pinu sygnałowego cyfrowego
#define DHTPINW 3          // numer pinu sygnałowego cyfrowego
DHT dhtz;                  // definicja czujnika zewnetrzna
DHT dhtw;                  // definicja czujnika wewnetrzna

//rezystancja analogowa
// Analog pin 0 do czujnika rezystancji
int analogPin= 0;
int raw= 0;
int Vin= 5;
float Vout= 0;
// wczesniejsza wartosc
//float R1= 383;
// z testow na dzien 15.09.2019 wychodzi, ze napiecie jest ciuz nizsze i takie musimy przyjac wartosci dla R1
float R1= 375;
float R2= 0;
float buffer= 0;

//bmp czujnik cisnienia atmosferycznego
#include <Wire.h>
#include <SFE_BMP180.h>

SFE_BMP180 bmp180;

// ethernet
#include <SPI.h>
#include <Ethernet.h>

byte mac[] = {
  0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED
};
IPAddress ip(192, 168, 1, 2);
EthernetServer server(80);

void setup() {
  // Open serial communications and wait for port to open:
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }
  Serial.println("Ethernet WebServer Example");

  // start the Ethernet connection and the server:
  Ethernet.begin(mac, ip);

  // Check for Ethernet hardware present
  if (Ethernet.hardwareStatus() == EthernetNoHardware) {
    Serial.println("Ethernet shield was not found.  Sorry, can't run without hardware. :(");
    while (true) {
      delay(1); // do nothing, no point running without Ethernet hardware
    }
  }
  if (Ethernet.linkStatus() == LinkOFF) {
    Serial.println("Ethernet cable is not connected.");
  }

  // start the serverclient.print("; ");ni
  server.begin();
  Serial.print("server is at ");
  Serial.println(Ethernet.localIP());

// dht
dhtz.setup(DHTPINZ);      // inicjalizacja czujnika DHT12
dhtw.setup(DHTPINW);      // inicjalizacja czujnika DHT12

//bmp
bool success = bmp180.begin();
  if (success) {
    Serial.println("BMP180 init success");
  }  
}


void loop() {
  // listen for incoming clients
  EthernetClient client = server.available();
  if (client) {
    Serial.println("new client");
    // an http request ends with a blank line
    bool currentLineIsBlank = true;
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        Serial.write(c);
        // if you've gotten to the end of the line (received a newline
        // character) and the line is blank, the http request has ended,
        // so you can send a reply
        if (c == '\n' && currentLineIsBlank) {
          // send a standard http response header
          //client.println("HTTP/1.1 200 OK");
          //client.println("Content-Type: text/html");
          //client.println("Connection: close");  // the connection will be closed after completion of the response
          //client.println();
          //client.println("<!DOCTYPE HTML>");
          //client.println("<html>");
          client.println("<xml>");

//dht zewnetrzny        
//Miniamalne opóźnienie odczytu
delay(dhtz.getMinimumSamplingPeriod());
// Odczyt temperatury i wilgotności powietrza
float tz = dhtz.getTemperature();
float hz = dhtz.getHumidity();
// Jeśli tak, wyświetlamy wyniki pomiaru
client.print("\n");
client.print("<zewnetrzna-wilgotnosc>");
client.print(hz);
client.print("</zewnetrzna-wilgotnosc>");
client.println("\n");
client.print("<zewnetrzna-temperatura>");
client.print(tz);
client.print("</zewnetrzna-temperatura>");

//dht wewnetrzny        
//Miniamalne opóźnienie odczytu
delay(dhtw.getMinimumSamplingPeriod());
// Odczyt temperatury i wilgotności powietrza
float tw = dhtw.getTemperature();
float hw = dhtw.getHumidity();
// Jeśli tak, wyświetlamy wyniki pomiaru
client.println("\n");
client.print("<wewnetrzna-wilgotnosc>");
client.print(hw);
client.print("</wewnetrzna-wilgotnosc>");
client.println("\n");
client.print("<wewnetrzna-tempetatura>");
client.print(tw);
client.print("</wewnetrzna-temperatura>");

// mierzenie rezystancji
raw= analogRead(analogPin);
buffer= raw * Vin;
Vout= (buffer)/1024.0;
buffer= (Vin/Vout) -1;
R2= R1 * buffer;
client.println("\n");
client.print("<temperatura-spalin>");
client.print(R2);
client.print("</temperatura-spalin>");

//bmp - czujnik cisnienia
  char status;
  double T, P;
  bool success = false;

  status = bmp180.startTemperature();

  if (status != 0) {
    delay(1000);
    status = bmp180.getTemperature(T);

    if (status != 0) {
      status = bmp180.startPressure(3);

      if (status != 0) {
        delay(status);
        status = bmp180.getPressure(P, T);

        if (status != 0) {
          client.println("\n");
          client.print("<cisnienie>");
          client.print(P);
          client.print("</cisnienie>");
        }
      }
    }
  }
          client.println("\n");
          //client.println("</html>");
          client.println("</xml>");
          break;
        }
        if (c == '\n') {
          // you're starting a new line
          currentLineIsBlank = true;
        } else if (c != '\r') {
          // you've gotten a character on the current line
          currentLineIsBlank = false;
        }
      }
    }
    // give the web browser time to receive the data
    delay(1);
    // close the connection:
    client.stop();
    Serial.println("client disconnected");
  }
}
